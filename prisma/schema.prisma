// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator typegraphql {
  provider = "typegraphql-prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_CONNECTION_STRING")
}

model subscriptions {
  block_number Int
  txIndex      Int
  eventIndex   Int
  txHash       String

  user                 String
  is_active            Boolean
  min_health_factor    Int
  max_health_factor    Int
  target_health_factor Int
  protocol             String
  timestamp            Int
  cursor               BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")
}

model rebalances {
  block_number Int
  txIndex      Int
  eventIndex   Int
  txHash       String

  user                   String
  strategy               String
  token                  String
  amount                 BigInt
  protocol               String
  is_outflow             Boolean
  previous_health_factor Int
  new_health_factor      Int

  cursor BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")
}

model zklend_liquidations {
  block_number Int
  txIndex      Int    @default(0)
  eventIndex   Int    @default(0)
  txHash       String

  user             String
  debt_token       String
  debt_face_amount BigInt
  cursor           BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")
}

model dnmm_user_actions {
  block_number Int
  txIndex      Int    @default(0)
  eventIndex   Int    @default(0)
  txHash       String

  sender                      String
  receiver                    String
  owner                       String
  type                        String // deposit | withdraw
  assets                      String
  position_acc1_supply_shares String
  position_acc1_borrow_shares String
  position_acc2_supply_shares String
  position_acc2_borrow_shares String
  contract                    String
  timestamp                   Int
  cursor                      BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")
}

model investment_flows {
  block_number Int
  txIndex      Int    @default(0)
  eventIndex   Int    @default(0)
  txHash       String

  sender    String // caller of tx
  receiver  String // owner on deposit, could be anyone on withdraw
  owner     String // the one who received or sent the asset
  amount    String
  asset     String
  contract  String
  type      String // deposit | withdraw
  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")
}

model harvests {
  block_number Int
  txIndex      Int    @default(0)
  eventIndex   Int    @default(0)
  txHash       String

  user      String
  contract  String
  amount    String
  price     Float   @default(0) // the indexer will set this 0, but when reading, it will be set to the price at the time of the harvest
  timestamp Int
  cursor    BigInt? @map("_cursor")

  @@unique([block_number, txIndex, eventIndex], name: "event_id")
}

model user_points {
  id        Int    @id @default(autoincrement())
  owner     String @unique
  points    Int
  hold_days Int    @default(0)
}
